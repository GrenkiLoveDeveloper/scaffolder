version: "3.9"

name: scaffolder

######### Services ###################################
services:
  # Server container
  nginx:
    build:
      context: docker/nginx
      dockerfile: Dockerfile
    container_name: api-local-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./:/var/www
      - ./docker/nginx/logs:/var/log/nginx
    networks:
      - app-local-network

  php:
    build:
      args:
        user: sammy
        uid: 1000
      context: docker/php
      dockerfile: Dockerfile
    container_name: api-local-app
    image: api-local-app:local
    restart: unless-stopped
    working_dir: /var/www/api
    volumes:
      - ./api:/var/www/api
    networks:
      - app-local-network
    depends_on:
      - postgres
      - nginx
    command: >
      sh -c "
        composer install --optimize-autoloader --no-scripts --prefer-dist --no-interaction &&
        php artisan migrate &&
        php-fpm
      "

  postgres:
    build:
      context: docker/db/
      dockerfile: Dockerfile
    container_name: api-local-db
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # установка pg_trgm расширения
      POSTGRES_EXTENSIONS: pg_trgm
    volumes:
      - postgres_local_data:/var/lib/postgresql/data
    networks:
      - app-local-network
    ports:
      - "${POSTGRES_PORT}:5432"

  # Client container
  client:
    build:
      context: docker/client/
      dockerfile: Dockerfile
    ports:
      - "${CLIENT_PORT}:3000"
    volumes:
      - ./client:/var/www/client
    depends_on:
      - nginx
      - php

  redis:
    container_name: "redis-server"
    restart: unless-stopped
    image: "redis:7.2.4-alpine"
    command: >
      --requirepass ${REDIS_PASSWORD}
    ports:
      - ${REDIS_PORT:-6379}:6379
    volumes:
      - container-volume:/data
    environment:
      - ALLOW_EMPTY_PASSWORD=no
    networks:
      - app-local-network

  local-scheduler:
    build:
      context: docker/php/cron
      dockerfile: Dockerfile
    tty: true
    volumes:
      - ./api:/var/www/api
    networks:
      - app-local-network
    restart: always
    depends_on:
      - php

  local-supervisor:
    build:
      context: docker/php/supervisor
      dockerfile: Dockerfile
    volumes:
      - ./api:/var/www/api
    networks:
      - app-local-network
    restart: always
    depends_on:
      - php

  soketi:
    container_name: "soketi-server"
    restart: unless-stopped
    image: "quay.io/soketi/soketi:latest-16-alpine"
    ports:
      - ${PUSHER_PORT:-6001}:6001
      - ${PUSHER_METRICS_PORT:-9601}:9601
    environment:
      - SOKETI_DEBUG=1
      - SOKETI_PORT=6001
      - SOKETI_DEFAULT_APP_KEY=${PUSHER_APP_KEY:-app-key}
      - SOKETI_DEFAULT_APP_ID=${PUSHER_APP_ID:-some-id}
      - SOKETI_DEFAULT_APP_SECRET=${PUSHER_APP_SECRET:-some-app-secret}
      - SOKETI_PRESENCE_MAX_MEMBERS=1000
    networks:
      - app-local-network

  minio:
    build:
      context: docker/minio
      dockerfile: Dockerfile
    container_name: "minio-server"
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_local_data:/data
    environment:
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ROOT_USER: "admin"
      MINIO_ROOT_PASSWORD: "password"
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_KEY: ${MINIO_KEY}
      MINIO_SECRET: ${MINIO_SECRET}
    networks:
      - app-local-network

networks:
  app-local-network:
    driver: bridge

######### Volumes #########
volumes:
  container-volume:
  postgres_local_data:
    external: false
  minio_local_data:
    external: false
